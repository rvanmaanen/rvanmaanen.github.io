---
mode: 'agent'
description: 'Step-by-step git workflow for committing, rebasing, and pushing changes with branch protection, comprehensive change analysis, and optional PR creation'
model: Claude Sonnet 4
tools: ['changes', 'codebase', 'editFiles', 'extensions', 'fetch', 'findTestFiles', 'githubRepo', 'new', 'openSimpleBrowser', 'problems', 'runCommands', 'runNotebooks', 'runTasks', 'runTests', 'search', 'searchResults', 'terminalLastCommand', 'terminalSelection', 'testFailure', 'usages', 'vscodeAPI', 'github']
---

# Step-by-Step Git Commit, Rebase, Conflict Resolution, and Push Workflow

**CRITICAL**: STRICTLY follow each step in this script and NEVER skip any steps or instructions unless explicitly mentioned.
**CRITICAL**: When instructed to use the `.\.github\prompts\pushall-delay.ps1` script, ALWAYS do so and do exactly as instructed.
**CRITICAL**: Do not give me any information I did not explicitly ask for. Always give me the least amount of information I need to proceed.
**CRITICAL**: All codeblock commands MUST be used exactly as provided. Do not alter them in any way.
**CRITICAL**: Use the GitHub MCP tools as much as possible when you need to interact with GitHub (comprehensive API access for pull requests, issues, reviews, etc.).

##⚠️ CRITICAL: Command Usage Guidelines

**Git Operations**: Use PowerShell/Git commands directly:
- `git add .` - Stage changes
- `git commit -F ".tmp/git-changes-analysis/commit-message.txt"` - Commit with message from file
- `git pull --rebase` - Pull with rebase
- `git push` - Push changes

**GitHub API Operations**: Use GitHub MCP Server tools ONLY:
- `mcp_github_create_pull_request` - Create new pull requests
- `mcp_github_update_pull_request` - Update existing pull requests  
- `mcp_github_get_pull_request_reviews` - Check for existing reviews
- `mcp_github_request_copilot_review` - Request Copilot code reviews
- `mcp_github_list_pull_requests` - Check for existing PRs

**File Operations**: Use PowerShell commands and tools:
- `Get-Content`, `Set-Content` - File reading/writing
- `.\.github\prompts\get-git-changes.ps1` - Git analysis
- `.\.github\prompts\pushall-delay.ps1` - User confirmation with delay

**NEVER use PowerShell scripts for GitHub API operations - always use the GitHub MCP Server tools listed above.**

1. **Check current branch and current changes:**

    ```pwsh
    pwsh .\.github\prompts\get-git-changes.ps1
    ```

    This script captures comprehensive git changes analysis, including git status, individual diff files, and branch information, saving it to `.tmp/git-changes-analysis/` directory. The main analysis data is in `git-changes-analysis.json` and individual `.diff` files are created for each changed file.
    
    The analysis file also contains the name of the current branch. In further steps, this will be referred to as `[BRANCHNAME]`

2. **Branch protection check:** Only do this if you are on the `main` branch!

    Use the delay script to ask if the user wants to move changes to a new branch:

    ```pwsh
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "You are on the main branch. If you do nothing, I will create a branch for your changes with name:" -Message "[REPLACE WITH THE NAME OF THE NEW BRANCH YOU WILL CREATE]" -Delay 10
    ```

    - **Exit code 0 (user did not abort):** Create a new branch and move changes there
    - **Exit code 1 (user aborted):** Ask the user how they want to handle the branch situation
    - **If you or the user create a new branch in this step:** After the new branch is created, **always** run the script `pwsh .\.github\prompts\get-git-changes.ps1` again because there might be new changes. Make sure `[BRANCHNAME]` now refers to the new branch. Then continue with step 5 and skip step 3.
    - **If you stay on main branch:** Continue with step 3.

3. **Confirm branch is correct:** If you skipped step 2 because you are not on the main branch, ask the user to confirm they want to continue on the current branch:

    ```pwsh
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "If you do nothing, your changes will be pushed on branch:" -Message "[BRANCHNAME]" -Delay 10
    ```

    - **Exit code 0 (user did not abort):** Continue with step 4
    - **Exit code 1 (user aborted):** Ask the user what's wrong, then still perform step 2 to ask which branch they want to move to.

4. **Analyze changes and prepare commit message:** Read the analysis output `.tmp/git-changes-analysis/git-changes-analysis.json` and the corresponding `.diff` files. Then carefully analyze the comprehensive changes information and prepare a clear, descriptive commit message that explains what was changed and why. The commit message will be referenced as `[COMMITMESSAGE]`.

    **Instructions:**

    - Review the `status.summary` to understand the scope of changes
    - **CRITICAL**: Use exact `diffPath` values from `diff.diffFiles[]` array in the JSON - do NOT assume filename formats
    - Examine the individual `.diff` files using the paths from JSON for detailed understanding of what changed  
    - Check the `branch` information for context, including `hasUnpushedCommits` and `unpushedCommits`
    - Use the structured `status.files` data for file-specific insights
    - Review `changes.fileDetails` for per-file change analysis with change types
    - Check `diff.stats` and `diff.filesChanged` for additional diff information
    - Use `status.raw` for raw git status if needed
    - Create a commit message that is clear, summarizing the changes made with a title and which files are affected, followed by a bullet-point list of key changes.
    - **CRITICAL**: Write the commit message you create directly to `.tmp/git-changes-analysis/commit-message.txt` file using: `pwsh -Command '@"
[COMMITMESSAGE]
"@ | Out-File -FilePath ".tmp/git-changes-analysis/commit-message.txt" -Encoding utf8'`

    **How to locate diff files:**

    ```
    # Read the JSON to get exact diff file paths
    $analysis = Get-Content ".tmp/git-changes-analysis/git-changes-analysis.json" | ConvertFrom-Json
    # Use the exact paths from $analysis.diff.diffFiles[].diffPath
    # Example paths: ".tmp/git-changes-analysis/.devcontainer-devcontainer.json.diff"
    #                ".tmp/git-changes-analysis/.github-prompts-pushall.prompt.md.diff"
    ```

    **Example commit message:**

    ```
    Enhanced PowerShell workflow scripts with responsive terminal UX and improved documentation

    1. Major improvements to pushall-delay.ps1:
    - Added responsive terminal resizing with dynamic layout recalculation
    - Improved error handling with safe fallbacks for console operations
    - Added helper functions for consistent progress bar rendering
    - Enhanced visual presentation with proper spacing and alignment

    2. Improved git changes analysis script (get-git-changes.ps1):
    - Added terminal clearing for cleaner output presentation

    3. Enhanced workflow documentation (pushall.prompt.md):
    - Improved user interaction guidelines for PR creation and Copilot review requests
    - Better workflow control with mandatory user confirmation steps"
    ```

5. **Get user confirmation:** Use the delay script to confirm the commit message you prepared:

    ```pwsh
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "If you do nothing, your changes will be committed and pushed on branch '[BRANCHNAME]' with message:" -Message "" -MessageFile ".tmp/git-changes-analysis/commit-message.txt" -Delay 20
    ```

    - **Exit code 0 (user did not abort):** Continue with steps 6 and 7 to stage and commit
    - **Exit code 1 (user aborted):** Ask the user what's wrong and do not continue with the workflow

6. **Stage all changes:**

    ```pwsh
    git add .
    ```

7. **Commit with the confirmed message:**

    ```pwsh
    git commit -F ".tmp/git-changes-analysis/commit-message.txt"
    ```

8. **Check for remote changes and pull if needed:**

    Check the `branch.hasRemoteChanges` field from the git-changes-analysis.json file in the `.tmp/git-changes-analysis/` directory.
    
    **If hasRemoteChanges is true:**
    ```pwsh
    git pull --rebase
    ```
    
    **If hasRemoteChanges is false:**
    Skip this step - no remote changes to pull. Continue to step 10.

9. **Handle conflicts if they occur during rebase:**

    - **Check for conflicts:** Look for conflict markers in files
    - **Resolve conflicts:** Edit files to resolve conflicts manually
    - **Mark as resolved and continue:**

      ```pwsh
      git add .
      git rebase --continue
      ```

    - **Repeat:** Continue this process until all conflicts are resolved and the rebase completes

10. **Push your changes:**

    ```pwsh
    git push
    ```

11. **Check for existing pull requests:**

    Check if there is already an open pull request for the current branch. If there is an existing PR, go to step 12. If there is not, go to step 13.
    
12. **Handle existing PR:**

    - Inform the user that there's already an open PR for this branch
    - The new commits have been automatically added to the existing PR by the push operation
    - Display the existing PR information (title, number, URL)
    - Use the delay script to ask about updating the PR description:

    ```pwsh
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "The commits have been automatically added to the existing PR. If you do nothing, I will update the PR description to reflect the new changes." -Delay 10
    ```

    - **Exit code 0 (user did not abort):** Look at what is currently in the PR description. See if the new changes impact what is described. If so, update the description. If not, add an extra section describing the new changes. Then update the pull request with the PR number found in this step. Update the title of the PR if needed as well. Then go to step 14.
    - **Exit code 1 (user aborted):** Go to step 14

13. **Handle new PR:**

    - Use the delay script to ask about creating a pull request:

    ```pwsh
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "If you do nothing, I will create a pull request for the changes you just pushed." -Delay 10
    ```

    - **Exit code 0 (user did not abort):** Create a pull request with descriptive title and detailed description of changes. Set the head branch to your current branch and base to the target branch (usually main). Show the new PR information (title, number, URL). Then go to step 14.
    - **Exit code 1 (user aborted):** The workflow is complete.

14. **Optionally assign Copilot as reviewer:**

    - Check if Copilot has already reviewed the PR.
    - Use the delay script to ask about requesting a Copilot review:

    ```pwsh
    # If no Copilot review exists
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "If you do nothing, I will request a Copilot code review for this pull request" -Delay 05

    # OR if Copilot already reviewed
    pwsh .\.github\prompts\pushall-delay.ps1 -Warning "Copilot already reviewed this pull request. If you do nothing, I will request a new review." -Delay 10
    ```

    - **Exit code 0 (user did not abort):** Request automated feedback from Copilot
    - **Exit code 1 (user aborted):** Leave the PR without Copilot review request
    - The workflow is complete

## Summary of the workflow

1. Verify current branch and handle main branch protection
2. Confirm branch is correct with user confirmation
3. Review and analyze all changes with descriptive commit message
4. Get user confirmation and commit changes
5. Pull latest changes with rebase, resolving any conflicts
6. Push changes to the remote branch
7. Check for existing pull requests
8. Optionally create new PR or update existing PR description
9. Optionally request GitHub Copilot code review for pull requests

This process ensures your local changes are committed, the latest remote changes are integrated, all conflicts are resolved, your commit history remains clean and linear, proper branch protection is respected, existing PRs are intelligently updated with new commits, and Copilot code reviews can be requested for automated feedback.